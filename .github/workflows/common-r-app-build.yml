on:
  workflow_call:
    secrets:
      personal-access-token-github:
        required: true
        description: "set this to your PERSONAL_ACCESS_TOKEN_GITHUB/ACCESS_TOKEN_GITHUB - it is used during build for getting libs from github packages and for sonar access to github"        

    # TODO descriptions
    inputs:
      working-directory:
        required: true
        type: string
      docker-repo:
        required: true
        type: string
      cache-version:
        required: false
        type: string
        default: v1
      is-package:
        required: true
        type: string
      renv-version:
        required: false
        type: string
        default: 0.14.0
      r-image:
        required: false
        type: string
        default: "powerex/pwx-r:4.1.2"

    outputs:
      tag-to-deploy:
        description: "Published image tag for immediate deployment"
        value: ${{ jobs.common-java-app-build.outputs.tag-to-deploy }}

jobs:
  common-r-api-build:
    runs-on: ubuntu-latest

    container:
      image: ${{ inputs.r-image }}

    env:
      # default env var name under which R uses token for package installation
      GITHUB_PAT: "${{ secrets.personal-access-token-github }}"

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    outputs:
      tag-to-deploy: ${{ steps.output-docker-tag.outputs.TAG_TO_DEPLOY }}

    steps:
      - uses: actions/checkout@v4.1.1
        with:
          lfs: false
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          set-safe-directory: true

      - name: Initialize global renv
        # TODO master
        uses: PowereX-jsa/pwx-actions/r-actions/setup-renv@feature/no-issue_migrate_r_actions
        with:
          working-dir: ${{ inputs.working-directory }}
          renv-version: ${{ inputs.renv-version }}
          cache-version: ${{ inputs.cache-version }}
             
      # Declares the repository safe and not under dubious ownership.
      - name: Add repository to git safe directories
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
             
      # if the r project is package, tests run via devtools
      - name: Run tests and report
        if: inputs.is-package == 'true'
        # TODO master
        uses: PowereX-jsa/pwx-actions/r-actions/devtools-test-package@feature/no-issue_migrate_r_actions
        with:
          package-dir: ${{ inputs.working-directory }}
          activate-renv: "TRUE"
      
      # if r project is only scripts, tests run via simple testthat
      - name: Run tests and report
        if: inputs.is-package == 'false'
        # TODO master
        uses: PowereX-jsa/pwx-actions/r-actions/run-tests@feature/no-issue_migrate_r_actions
        with:
          test-dir: ${{ inputs.working-directory }}/tests/testthat

      # TODO this 3 sections are same as in common-java-app-build -> create either separate job or composite action

      # building docker images
      - name: Set docker tag
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/master' || ${{ github.ref }} == 'refs/heads/main' ]]; then
            # set tags as env vars in current runner
            echo "TAG=latest,prod_$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          else
            # set tags as env vars in current runner
            echo "TAG=$(echo test-deploy_${{ github.head_ref }} | tr -s '/' '_' | tr -s '#' '_' )" >> "$GITHUB_ENV"
          fi

      - name: Docker build and push
        uses: kciter/aws-ecr-action@master
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          repo: ${{ inputs.docker-repo }}
          region: eu-central-1
          tags: ${{ env.TAG }}
          dockerfile: "${{ inputs.working-directory }}/Dockerfile"
          create_repo: false
          set_repo_policy: false
          repo_policy_file: repo-policy.json
          path: ${{ inputs.working-directory }}

      # can`t do this in step 'Set docker tag' because for some reason env.TAG is empty - probably is filled after the step is finished
      - name: Show published docker image tag and set it as output of job
        id: output-docker-tag
        run: |
          echo "following tags for docker image: ${{ env.TAG }} were pushed"

          # set output tag from job, going for real tag 'test_deploy_*', or 'prod_*' not 'latest'
          echo "TAG_TO_DEPLOY=$( echo  ${{ env.TAG }} | cut -d ',' -f 2)" >> "$GITHUB_OUTPUT"

      - name: Create summary
        run: |
          # create job summary
          echo "### \#\# pushed tags: '${{ env.TAG }}' to aws ecr registry" >> $GITHUB_STEP_SUMMARY
          echo "### \#\# " >> $GITHUB_STEP_SUMMARY
          echo "### \#\# going to use following tag: '${{ steps.output-docker-tag.outputs.TAG_TO_DEPLOY }}' for deployment" >> $GITHUB_STEP_SUMMARY
