on:
  workflow_call:
    secrets:
      aws-access-key-id:
        required: true
        description: "set this to AWS_ACCESS_KEY_ID of your user"
      aws-secret-access-key:
        required: true
        description: "set this to AWS_SECRET_ACCESS_KEY of your user"
    inputs:
      aws-region:
        required: true
        type: string
        description: "set this to your preferred AWS region, e.g. us-west-1"
      app:
        required: true
        type: string
        description: "set this to your app name - task definition name"
      ecs-cluster:
        required: true
        type: string
        description: "set this to your Amazon ECS cluster name, e.g. ecs-dev"
      image:
        required: true
        type: string
        description: "image to deploy to ecs in task def"

jobs:
  process-eventbridge:
    runs-on: ubuntu-latest
    outputs:
      has-rules: ${{ steps.check-rules.outputs.has_rules }}
      rules-matrix: ${{ steps.check-rules.outputs.rules_matrix }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false

      - name: Check for EventBridge rules
        id: check-rules
        run: |
          echo "Listing EventBridge rules with prefix ${{ inputs.app }}..."
          
          # eventBridge rules
          aws events list-rules --name-prefix "${{ inputs.app }}" --query "Rules[].Name" --output json | jq -c '.' > rules.json
          
          if [ "$(cat rules.json)" == "[]" ]; then
            echo "No EventBridge rules found"
            echo "has_rules=false" >> $GITHUB_OUTPUT
          else
            echo "Found EventBridge rules:"
            cat rules.json
            echo "has_rules=true" >> $GITHUB_OUTPUT
            jq -c '{"task": .}' rules.json > rules-matrix.json
            echo "rules_matrix=$(cat rules-matrix.json | tr -d '\n')" >> $GITHUB_OUTPUT
          fi

  process-scheduler:
    runs-on: ubuntu-latest
    outputs:
      has-schedules: ${{ steps.check-schedules.outputs.has_schedules }}
      schedules-matrix: ${{ steps.check-schedules.outputs.schedules_matrix }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false

      - name: Check for EventBridge schedules
        id: check-schedules
        run: |
          echo "Checking EventBridge Scheduler with prefix ${{ inputs.app }}..."
          
          # try to list schedules
          set +e
          aws scheduler list-schedules --name-prefix "${{ inputs.app }}" --query "Schedules[].Name" --output json > schedules.json 2>/dev/null
          SCHEDULER_RESULT=$?
          set -e
          
          if [ $SCHEDULER_RESULT -ne 0 ] || [ "$(cat schedules.json)" == "[]" ]; then
            echo "No EventBridge schedules found"
            echo "has_schedules=false" >> $GITHUB_OUTPUT
          else
            echo "Found EventBridge schedules:"
            cat schedules.json
            echo "has_schedules=true" >> $GITHUB_OUTPUT
            jq -c '{"task": .}' schedules.json > schedules-matrix.json
            echo "schedules_matrix=$(cat schedules-matrix.json | tr -d '\n')" >> $GITHUB_OUTPUT
          fi

  deploy-rules:
    needs: [process-eventbridge]
    if: needs.process-eventbridge.outputs.has-rules == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.process-eventbridge.outputs.rules-matrix) }}
    env:
      ACTIONS_STEP_DEBUG: true
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false

      - name: Process EventBridge rule (Original working approach)
        run: |
          echo "Processing EventBridge rule: ${{ matrix.task }}"

          aws events list-targets-by-rule --rule ${{ matrix.task }} > rule-target.json
          echo "Rule target:"
          cat rule-target.json

          TASK_DEF=$(echo "${{ matrix.task }}" | sed 's/_[0-9]*$//')
          echo "Extracted task definition name: $TASK_DEF"

          TASK_EXISTS=$(aws ecs list-task-definitions --family-prefix "$TASK_DEF" --status ACTIVE --query 'length(taskDefinitionArns)' --output text)
          
          if [ "$TASK_EXISTS" -eq "0" ]; then
            echo "No task definition found with name $TASK_DEF"
            exit 1
          fi
          
          echo "Using task definition: $TASK_DEF"
          
          aws ecs describe-task-definition --task-definition "$TASK_DEF" --query taskDefinition > task-definition.json
          
          echo "Downloaded task definition:"
          cat task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
        with:
          task-definition: task-definition.json
          container-name: main
          image: ${{ inputs.image }}

      - name: Prepare new task definition
        run: |
          cat ${{ steps.render-task-def.outputs.task-definition }} | jq 'del(.taskDefinitionArn) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.revision) | del(.registeredAt) | del(.registeredBy)' > task-definition-ready.json

      - name: Register the new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition-ready.json > task-definition-registered.json
          NEW_TASK_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' task-definition-registered.json)
          echo "new_task_arn=$NEW_TASK_ARN" >> $GITHUB_ENV

      - name: Update EventBridge rule target
        run: |
          aws events list-targets-by-rule --rule ${{ matrix.task }} > rule-target.json
          echo "Current target configuration:"
          cat rule-target.json
          
          jq --arg new_task_arn "${{ env.new_task_arn }}" '.Targets[].EcsParameters.TaskDefinitionArn = $new_task_arn' rule-target.json > new-target.json
          
          echo "New target configuration:"
          cat new-target.json
          
          TARGETS=$(jq -c '.Targets' new-target.json)
          aws events put-targets --rule ${{ matrix.task }} --targets "$TARGETS"

  deploy-schedules:
    needs: [process-scheduler]
    if: needs.process-scheduler.outputs.has-schedules == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.process-scheduler.outputs.schedules-matrix) }}
    env:
      ACTIONS_STEP_DEBUG: true
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false

      - name: Process EventBridge scheduler
        run: |
          echo "Processing EventBridge scheduler: ${{ matrix.task }}"
          
          # Similar approach to EventBridge rules
          TASK_DEF="${{ inputs.app }}"
          echo "Using app name as task definition: $TASK_DEF"
          
          TASK_EXISTS=$(aws ecs list-task-definitions --family-prefix "$TASK_DEF" --status ACTIVE --query 'length(taskDefinitionArns)' --output text)
          
          if [ "$TASK_EXISTS" -eq "0" ]; then
            echo "No task definition found with name $TASK_DEF"
            exit 1
          fi
          
          echo "Using task definition: $TASK_DEF"
          
          aws ecs describe-task-definition --task-definition "$TASK_DEF" --query taskDefinition > task-definition.json
          
          echo "Downloaded task definition for $TASK_DEF"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
        with:
          task-definition: task-definition.json
          container-name: main
          image: ${{ inputs.image }}

      - name: Prepare new task definition
        run: |
          cat ${{ steps.render-task-def.outputs.task-definition }} | jq 'del(.taskDefinitionArn) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.revision) | del(.registeredAt) | del(.registeredBy)' > task-definition-ready.json

      - name: Register the new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition-ready.json > task-definition-registered.json
          NEW_TASK_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' task-definition-registered.json)
          echo "new_task_arn=$NEW_TASK_ARN" >> $GITHUB_ENV

      - name: Update EventBridge scheduler target
        run: |
          aws scheduler get-schedule --name "${{ matrix.task }}" > schedule.json
          echo "Current schedule configuration:"
          cat schedule.json

          SCHEDULE_EXPRESSION=$(jq -r '.ScheduleExpression' schedule.json)
          FLEX_TIME_WINDOW=$(jq -c '.FlexibleTimeWindow' schedule.json)

          NEW_TARGET=$(jq --arg new_task_arn "${{ env.new_task_arn }}" '.Target | .EcsParameters.TaskDefinitionArn = $new_task_arn' schedule.json)

          aws scheduler update-schedule \
            --name "${{ matrix.task }}" \
            --schedule-expression "$SCHEDULE_EXPRESSION" \
            --flexible-time-window "$FLEX_TIME_WINDOW" \
            --target "$NEW_TARGET"
