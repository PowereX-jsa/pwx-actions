on:
  workflow_call:
    secrets:
      aws-access-key-id:
        required: true
        description: "set this to AWS_ACCESS_KEY_ID of your user"
      aws-secret-access-key:
        required: true
        description: "set this to AWS_SECRET_ACCESS_KEY of your user"
    inputs:
      aws-region:
        required: true
        type: string
        description: "set this to your preferred AWS region, e.g. us-west-1"
      app:
        required: true
        type: string
        description: "set this to your app name - task definition name"
      ecs-cluster:
        required: true
        type: string
        description: "set this to your Amazon ECS cluster name, e.g. ecs-dev"
      image:
        required: true
        type: string
        description: "image to deploy to ecs in task def"

jobs:
  list-scheduled-tasks:
    runs-on: ubuntu-latest
    outputs:
      tasks-matrix: ${{ steps.get-tasks.outputs.matrix }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false

      - name: Get scheduled tasks
        id: get-tasks
        run: |
          echo "Listing EventBridge rules with prefix ${{ inputs.app }}..."
          
          # Try standard EventBridge rules first
          aws events list-rules --name-prefix "${{ inputs.app }}" --query "Rules[].Name" --output json | jq -c '.' > tasks.json
          
          # If no results, try EventBridge Scheduler
          if [ "$(cat tasks.json)" == "[]" ]; then
            echo "No EventBridge rules found, checking EventBridge Scheduler..."
            aws scheduler list-schedules --name-prefix "${{ inputs.app }}" --query "Schedules[].Name" --output json | jq -c '.' > tasks.json
          fi
          
          # If still no results, just try to update the task definition directly
          if [ "$(cat tasks.json)" == "[]" ]; then
            echo "No scheduled tasks found, will try to update task definition directly"
            echo "[\"${{ inputs.app }}\"]" > tasks.json
          fi
          
          jq -c '{"task": .}' tasks.json > matrix.json
          echo "matrix=$(cat matrix.json | tr -d '\n')" >> $GITHUB_OUTPUT
          
          echo "Generated matrix:"
          cat matrix.json

  deploy:
    needs: [list-scheduled-tasks]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.list-scheduled-tasks.outputs.tasks-matrix) }}
    env:
      ACTIONS_STEP_DEBUG: true
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false

      - name: Get task definition name
        id: get-task-name
        run: |
          # Check if this is an EventBridge rule
          if aws events describe-rule --name "${{ matrix.task }}" 2>/dev/null; then
            # It's a rule
            echo "task_type=rule" >> $GITHUB_OUTPUT
            TASK_DEF=$(echo "${{ matrix.task }}" | sed 's/_[0-9]*$//')
          # Check if this is an EventBridge schedule
          elif aws scheduler get-schedule --name "${{ matrix.task }}" 2>/dev/null; then
            echo "task_type=schedule" >> $GITHUB_OUTPUT
            TASK_DEF=$(echo "${{ matrix.task }}" | sed 's/-[0-9]*$//')
          else
            # Direct task definition
            echo "task_type=taskdef" >> $GITHUB_OUTPUT
            TASK_DEF="${{ matrix.task }}"
          fi
          
          echo "task_def=$TASK_DEF" >> $GITHUB_OUTPUT
          echo "Using task definition: $TASK_DEF"

      - name: Download task definition
        run: |
          TASK_DEF="${{ steps.get-task-name.outputs.task_def }}"
          
          aws ecs describe-task-definition --task-definition "$TASK_DEF" --query taskDefinition > task-definition.json
          echo "Downloaded task definition."

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
        with:
          task-definition: task-definition.json
          container-name: main
          image: ${{ inputs.image }}

      - name: Prepare new task definition
        run: |
          cat ${{ steps.render-task-def.outputs.task-definition }} | jq 'del(.taskDefinitionArn) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.revision) | del(.registeredAt) | del(.registeredBy)' > task-definition-ready.json

      - name: Register the new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition-ready.json > task-definition-registered.json
          NEW_TASK_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' task-definition-registered.json)
          echo "new_task_arn=$NEW_TASK_ARN" >> $GITHUB_ENV

      - name: Update EventBridge Rule
        if: steps.get-task-name.outputs.task_type == 'rule'
        run: |
          aws events list-targets-by-rule --rule ${{ matrix.task }} > rule-target.json
          jq --arg new_task_arn "${{ env.new_task_arn }}" '.Targets[].EcsParameters.TaskDefinitionArn = $new_task_arn' rule-target.json > new-target.json
          TARGETS=$(jq -c '.Targets' new-target.json)
          aws events put-targets --rule ${{ matrix.task }} --targets "$TARGETS"

      - name: Update EventBridge Scheduler
        if: steps.get-task-name.outputs.task_type == 'schedule'
        run: |
          aws scheduler get-schedule --name "${{ matrix.task }}" > schedule.json
          TARGET=$(jq --arg new_task_arn "${{ env.new_task_arn }}" '.Target | .EcsParameters.TaskDefinitionArn = $new_task_arn' schedule.json)
          aws scheduler update-schedule --name "${{ matrix.task }}" --target "$TARGET"
