on:
  workflow_call:
    secrets:
      aws-access-key-id:
        required: true
        description: "set this to AWS_ACCESS_KEY_ID of your user"
      aws-secret-access-key:
        required: true
        description: "set this to AWS_SECRET_ACCESS_KEY of your user"
    inputs:
      aws-region:
        required: true
        type: string
        description: "set this to your preferred AWS region, e.g. us-west-1"
      app:
        required: true
        type: string
        description: "set this to your app name prefix for scheduled tasks"
      ecs-cluster:
        required: true
        type: string
        description: "set this to your Amazon ECS cluster name, e.g. ecs-dev"
      image:
        required: true
        type: string
        description: "image to deploy to ecs in task def"

jobs:
  list-schedules:
    runs-on: ubuntu-latest
    outputs:
      schedules-matrix: ${{ steps.get-schedules.outputs.matrix }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false

      - name: Get scheduled tasks
        id: get-schedules
        run: |
          SCHEDULES=$(aws scheduler list-schedules --query "Schedules[?starts_with(Name, '${{ inputs.app }}')].Name" | jq -c '{"schedule": .}')
          echo "matrix=${SCHEDULES}" >> $GITHUB_OUTPUT

  deploy-schedule:
    needs: [list-schedules]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.list-schedules.outputs.schedules-matrix) }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.app }} --query taskDefinition > task-definition.json

      - name: Prepare new task definition
        run: |
          cat task-definition.json | jq 'del(.taskDefinitionArn) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.revision) | del(.registeredAt) | del(.registeredBy)' > task-definition-ready.json

      - name: Register new task definition
        id: register-task-def
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition-ready.json > task-definition-registered.json
          echo "task_definition_arn=$(jq -r '.taskDefinition.taskDefinitionArn' task-definition-registered.json)" >> $GITHUB_OUTPUT

      - name: Get schedule configuration
        run: |
          aws scheduler get-schedule --name ${{ matrix.schedule }} | jq '{Target, ScheduleExpression, FlexibleTimeWindow, ScheduleExpressionTimezone}' > schedule-target.json

      - name: Update schedule with new task definition
        run: |
          jq --arg new_task_arn "${{ steps.register-task-def.outputs.task_definition_arn }}" '.Target.EcsParameters.TaskDefinitionArn = $new_task_arn' schedule-target.json > schedule-target-ready.json
          aws scheduler update-schedule --name ${{ matrix.schedule }} --cli-input-json file://schedule-target-ready.json
