on:
  workflow_call:
    secrets:
      aws-access-key-id:
        required: true
        description: "set this to AWS_ACCESS_KEY_ID of your user"
      aws-secret-access-key:
        required: true
        description: "set this to AWS_SECRET_ACCESS_KEY of your user"
      slack-webhook-url:
        required: true
        description: "Slack webhook URL for notifications"
    inputs:
      aws-region:
        required: true
        type: string
        description: "set this to your preferred AWS region, e.g. us-west-1"
      app:
        required: true
        type: string
        description: "set this to your app name - service/task definition name, e.g. emsi - for deploying multiple instances of app 'emsi', or specific 'emsi-stm-dubnica' - for deploying only 1 specific instance)"
      ecs-cluster:
        required: true
        type: string
        description: "set this to your Amazon ECS cluster name, e.g. ecs-dev"
      image:
        required: true
        type: string
        description: "image to deploy to ecs in task def, e.g. 587619238227.dkr.ecr.eu-central-1.amazonaws.com/imbalance-service"

jobs:
  list-instances:
    # TODO master
    uses: PowereX-jsa/pwx-actions/.github/workflows/list-ecs-instances.yml@feature/#2215_skip_deploy_if_there_are_no_instances
    secrets: 
      aws-access-key-id: ${{ secrets.aws-access-key-id }}
      aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
    with:
      aws-region: ${{ inputs.aws-region }}
      app: ${{ inputs.app }}

  deploy:
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.list-instances.outputs.instances-matrix) }}
    needs: [ list-instances ]
    # TODO master
    uses: PowereX-jsa/pwx-actions/.github/workflows/task-def-app-deploy.yml@feature/#2215_skip_deploy_if_there_are_no_instances
    secrets:
      aws-access-key-id: ${{ secrets.aws-access-key-id }}
      aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
    with:
      aws-region: ${{ inputs.aws-region }}
      ecs-service: ${{ matrix.instance }}
      ecs-task-definition: ${{ matrix.instance }}
      ecs-cluster: ${{ inputs.ecs-cluster }}
      image: ${{ inputs.image }}

  notify-slack:
    if: contains(inputs.ecs-cluster, 'prod') && contains(toJson(needs.deploy.result), 'failure')
    needs: [ deploy ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get short commit hash
        id: short_commit
        run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT        

      - name: Notify Slack
        uses: PowereX-jsa/pwx-actions/common-actions/notify-slack@master
        with:
          slack-webhook-url: ${{ secrets.slack-webhook-url }}
          status: ${{ needs.deploy.result }}
          repository: ${{ github.repository }}
          commit-url: ${{ format('{0}/{1}/commit/{2}', github.server_url, github.repository, github.sha) }}
          commit-slug: ${{ steps.short_commit.outputs.SHORT_SHA }}
          author: ${{ github.actor }}
          job: "ECS Deployment"
          event-name: ${{ github.event_name }}
          workflow: ${{ github.workflow }}
          run-id: ${{ github.run_id }}
          message: "ECS Deployment: ${{ inputs.app }} to ${{ inputs.ecs-cluster }}"
