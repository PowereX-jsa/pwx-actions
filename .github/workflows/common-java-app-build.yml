on:
  workflow_call:
    secrets:
      aws-access-key-id:
        required: true
        description: "set this to AWS_ACCESS_KEY_ID of your user"
      aws-secret-access-key:
        required: true
        description: "set this to AWS_SECRET_ACCESS_KEY of your user"
      aws-account-id:
        required: true
        description: "set this to AWS_ACCOUNT_ID of your user"
      github-username:
        required: true
        description: "set this to github username for which PERSONAL_ACCESS_TOKEN_GITHUB was generated"
      personal-access-token-github:
        required: true
        description: "set this to your PERSONAL_ACCESS_TOKEN_GITHUB/ACCESS_TOKEN_GITHUB - it is used during build for getting libs from github packages and for sonar access to github"        
      access-token-sonar:
        required: true
        description: "set this to your SONAR_TOKEN - it is used for sending statistics from build to sonar cloud (https://sonarcloud.io)"

    inputs:
      java-version:
        required: true
        type: number
        description: "set this to your desired java version (17, 19, etc.) of your project"
      working-directory:
        required: true
        type: string
        description: "set this to working directory where the app is located"
      docker-repo:
        required: true
        type: string
        description: "name of the docker repo in aws ecr where the image will be pushed"
      build-args:
        required: false
        type: string
        default: build --scan sonarqube --info
        description: "set this to your desired java gradle build arguments"

    outputs:
      tag-to-deploy:
        description: "Published image tag for immediate deployment"
        value: ${{ jobs.common-java-app-build.outputs.tag-to-deploy }}

jobs:
  common-java-app-build:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    outputs:
      tag-to-deploy: ${{ steps.build-docker-image.outputs.tag-to-deploy }}

    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK
        uses: actions/setup-java@v4.0.0
        with:
          distribution: 'corretto'
          java-version: ${{ inputs.java-version }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.1.0

      - name: Cache SonarCloud packages
        uses: actions/cache@v3.3.2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Gradle build, analyze and publish
        uses: gradle/gradle-build-action@v2.11.1
        with:
          build-root-directory: ${{ inputs.working-directory }}
          arguments: ${{ inputs.build-args }}
        env:
          # env vars for access to github-packages
          GITHUB_USERNAME: ${{ secrets.github-username }}
          PERSONAL_ACCESS_TOKEN_GITHUB: ${{ secrets.personal-access-token-github }}
          # env vars for sonar
          GITHUB_TOKEN: ${{ secrets.personal-access-token-github }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.access-token-sonar }}

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.12.0
        if: always()
        with:
          junit_files: ${{ inputs.working-directory }}/build/test-results/**/*.xml
        env:
          GITHUB_TOKEN: ${{ secrets.personal-access-token-github }}

      # building docker images
      - name: Build and push docker image
        id: build-docker-image
        # TODO master
        uses: PowereX-jsa/pwx-actions/common-actions/build-docker-image@feature/no-issue_migrate_r_actions
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-account-id: ${{ secrets.aws-account-id }}
          docker-repo: ${{ inputs.docker-repo }}
          working-directory: ${{ inputs.working-directory }}