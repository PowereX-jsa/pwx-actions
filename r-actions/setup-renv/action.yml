name: 'setup-renv'
description: 'Action to setup renv and install R dependencies in the lockfile'
author: 'patrik.beka@powerex.io'
inputs:
  working-dir:
    description: 'Working directory with source codes and renv.lock file'
    required: true
  renv-version:
    description: 'Version of renv package'
    required: false
    default: 0.14.0
  cache-version:
    description: 'Version of renv cache'
    required: false
    default: v3

runs:
  using: "composite"
  steps:
      # ============ SYSTEM INFORMATION GATHERING ============
      - name: Debug - System Information
        run: |
          echo "===== SYSTEM INFORMATION DEBUG START ====="
          echo "Current date: $(date)"
          echo "Hostname: $(hostname)"
          echo "Kernel: $(uname -a)"
          echo "Architecture: $(uname -m)"
          echo "Processor: $(uname -p)"
          echo "Operating System: $(uname -o)"
          
          echo -e "\n===== CPU Information ====="
          if [ -f /proc/cpuinfo ]; then
            echo "CPU Model: $(grep -m1 'model name' /proc/cpuinfo || echo 'Not found')"
            echo "CPU Architecture: $(grep -m1 'architecture' /proc/cpuinfo || echo 'Not found')"
            echo "CPU Flags: $(grep -m1 'flags' /proc/cpuinfo | head -c 200 || echo 'Not found')..."
          else
            echo "/proc/cpuinfo not found"
          fi
          
          echo -e "\n===== Memory Information ====="
          free -h 2>/dev/null || echo "free command not available"
          
          echo -e "\n===== Disk Space ====="
          df -h
          
          echo -e "\n===== Environment Variables ====="
          env | sort | head -50
          echo "... (showing first 50 env vars)"
          
          echo -e "\n===== GitHub Context Variables ====="
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          echo "GITHUB_ACTION: ${GITHUB_ACTION}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_RUN_ID: ${GITHUB_RUN_ID}"
          echo "GITHUB_RUN_NUMBER: ${GITHUB_RUN_NUMBER}"
          echo "RUNNER_NAME: ${RUNNER_NAME}"
          echo "RUNNER_OS: ${RUNNER_OS}"
          echo "RUNNER_ARCH: ${RUNNER_ARCH}"
          echo "RUNNER_TEMP: ${RUNNER_TEMP}"
          
          echo -e "\n===== Container Detection ====="
          if [ -f /.dockerenv ]; then
            echo "Running inside Docker container (/.dockerenv exists)"
          else
            echo "Not running in Docker container (/.dockerenv not found)"
          fi
          
          if [ -f /run/secrets/kubernetes.io ]; then
            echo "Running inside Kubernetes"
          fi
          
          echo -e "\n===== Network Information ====="
          ip addr show 2>/dev/null | head -20 || echo "ip command not available"
          
          echo -e "\n===== Process Information ====="
          ps aux | head -10
          
          echo "===== SYSTEM INFORMATION DEBUG END ====="
        shell: bash

      # ============ ARCHITECTURE DETECTION ============
      - name: Detect and Set Architecture
        id: arch
        run: |
          echo "===== ARCHITECTURE DETECTION START ====="
          
          # Multiple ways to detect architecture
          ARCH_UNAME=$(uname -m)
          echo "Architecture from uname -m: $ARCH_UNAME"
          
          ARCH_DPKG=$(dpkg --print-architecture 2>/dev/null || echo "dpkg not available")
          echo "Architecture from dpkg: $ARCH_DPKG"
          
          ARCH_GETCONF=$(getconf LONG_BIT 2>/dev/null || echo "getconf not available")
          echo "Architecture bits from getconf: $ARCH_GETCONF"
          
          # Normalize architecture name
          case "$ARCH_UNAME" in
            x86_64|amd64)
              NORMALIZED_ARCH="x86_64"
              R_ARCH="x86_64-pc-linux-gnu"
              ;;
            aarch64|arm64)
              NORMALIZED_ARCH="aarch64"
              R_ARCH="aarch64-unknown-linux-gnu"
              ;;
            armv7l|arm)
              NORMALIZED_ARCH="arm"
              R_ARCH="arm-unknown-linux-gnueabihf"
              ;;
            *)
              NORMALIZED_ARCH="$ARCH_UNAME"
              R_ARCH="unknown"
              ;;
          esac
          
          echo "Normalized architecture: $NORMALIZED_ARCH"
          echo "R architecture string: $R_ARCH"
          
          # Set outputs
          echo "arch=$NORMALIZED_ARCH" >> $GITHUB_OUTPUT
          echo "arch_raw=$ARCH_UNAME" >> $GITHUB_OUTPUT
          echo "r_arch=$R_ARCH" >> $GITHUB_OUTPUT
          
          # Also set as env vars for debugging
          echo "DETECTED_ARCH=$NORMALIZED_ARCH" >> $GITHUB_ENV
          echo "DETECTED_R_ARCH=$R_ARCH" >> $GITHUB_ENV
          
          echo "===== ARCHITECTURE DETECTION END ====="
        shell: bash

      # ============ PATH AND DIRECTORY INVESTIGATION ============
      - name: Debug - Directory Structure
        run: |
          echo "===== DIRECTORY STRUCTURE DEBUG START ====="
          echo "Current working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          
          echo -e "\n===== Working directory parameter: ${{ inputs.working-dir }} ====="
          echo "Checking if working directory exists..."
          if [ -d "${{ inputs.working-dir }}" ]; then
            echo "Working directory exists"
            echo "Contents of working directory:"
            ls -la "${{ inputs.working-dir }}"
            
            echo -e "\nLooking for renv-related files:"
            find "${{ inputs.working-dir }}" -name "renv*" -type f -o -name "renv" -type d 2>/dev/null | head -20
          else
            echo "ERROR: Working directory does not exist!"
            echo "Attempting to list parent directory:"
            ls -la "$(dirname "${{ inputs.working-dir }}")"
          fi
          
          echo -e "\n===== GitHub Workspace Structure ====="
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          if [ -d "${GITHUB_WORKSPACE}" ]; then
            echo "Contents of GITHUB_WORKSPACE:"
            ls -la "${GITHUB_WORKSPACE}" | head -20
          fi
          
          echo "===== DIRECTORY STRUCTURE DEBUG END ====="
        shell: bash

      # ============ CHECK LOCKFILE ============
      - name: Check if lockfile exists (with debug)
        run: |
          echo "===== LOCKFILE CHECK DEBUG START ====="
          FILE=${{ inputs.working-dir }}/renv.lock
          echo "Looking for lockfile at: $FILE"
          echo "Absolute path would be: $(realpath "$FILE" 2>/dev/null || echo 'realpath failed')"
          
          if [ -f "$FILE" ]; then
              echo "$FILE found."
              echo "File size: $(stat -c%s "$FILE" 2>/dev/null || stat -f%z "$FILE" 2>/dev/null || echo 'stat failed') bytes"
              echo "File permissions: $(ls -la "$FILE")"
              echo "First 10 lines of lockfile:"
              head -10 "$FILE"
              echo "..."
              echo "Last 5 lines of lockfile:"
              tail -5 "$FILE"
              
              # Check if file is readable
              if [ -r "$FILE" ]; then
                echo "File is readable"
              else
                echo "WARNING: File exists but is not readable!"
              fi
          else
              echo "ERROR: $FILE does not exist."
              echo "Attempting to find any .lock files:"
              find . -name "*.lock" -type f 2>/dev/null | head -10
              echo "===== LOCKFILE CHECK DEBUG END (WITH ERROR) ====="
              exit 1
          fi
          echo "===== LOCKFILE CHECK DEBUG END (SUCCESS) ====="
        shell: bash

      # ============ R ENVIRONMENT CHECK ============
      - name: Debug - R Environment
        run: |
          echo "===== R ENVIRONMENT DEBUG START ====="
          echo "Checking R installation..."
          
          which R || echo "R not in PATH"
          R --version || echo "R --version failed"
          
          echo -e "\nR library paths:"
          Rscript -e '.libPaths()' || echo "Failed to get library paths"
          
          echo -e "\nR session info:"
          Rscript -e 'sessionInfo()' || echo "Failed to get session info"
          
          echo -e "\nR environment variables:"
          Rscript -e 'Sys.getenv()' | head -20 || echo "Failed to get R env vars"
          
          echo -e "\nChecking for existing renv installation:"
          Rscript -e 'if(requireNamespace("renv", quietly = TRUE)) { print(paste("renv version:", packageVersion("renv"))) } else { print("renv not installed") }'
          
          echo "===== R ENVIRONMENT DEBUG END ====="
        shell: bash

      # ============ INSTALL RENV ============
      - name: Install renv (with debug)
        run: |
          echo "===== RENV INSTALLATION DEBUG START ====="
          echo "Installing renv version ${{ inputs.renv-version }}..."
          
          # install remotes package -> used for install specific renv version from github
          if (require("remotes") == FALSE) {
            print("Installing remotes package...")
            install.packages("remotes")
            print("remotes installed successfully")
          } else {
            print(paste("remotes already installed, version:", packageVersion("remotes")))
          }
          
          print("Installing renv from GitHub...")
          print(paste("Target version:", "${{ inputs.renv-version }}"))
          
          # Set verbose mode for installation
          options(verbose = TRUE)
          
          remotes::install_github("rstudio/renv@${{ inputs.renv-version }}", upgrade = "never", verbose = TRUE)
          
          print("renv installation completed")
          print(paste("Installed renv version:", packageVersion("renv")))
          
          # Verify installation
          library(renv)
          print("renv loaded successfully")
          
          print("===== RENV INSTALLATION DEBUG END =====")
        shell: Rscript {0}

      # ============ SET UP RENV DIRECTORIES ============
      - name: Set up renv dir as env variable (with debug)
        run: |
          print("===== RENV DIRECTORY SETUP DEBUG START =====")
          
          # Get library paths
          renv_global_lib_path <- renv:::renv_libpaths_resolve(library = NULL)[1]
          print(paste("Global library path resolved:", renv_global_lib_path))
          
          # Check if paths exist
          if (dir.exists(renv_global_lib_path)) {
            print("Global library path exists")
            print(paste("Contents:", list.files(renv_global_lib_path)[1:min(10, length(list.files(renv_global_lib_path)))]))
          } else {
            print("WARNING: Global library path does not exist")
          }
          
          working_dir <- "${{ inputs.working-dir }}"
          renv_dir <- file.path(working_dir, "renv")
          print(paste("Local renv directory:", renv_dir))
          
          if (dir.exists(renv_dir)) {
            print("Local renv directory exists")
            print(paste("Contents:", list.files(renv_dir)))
          } else {
            print("Local renv directory does not exist - will be created")
          }
          
          # Set environment variables
          system(paste0("echo 'GLOBAL_LIB_DIR=", renv_global_lib_path, "' >> $GITHUB_ENV"))
          system(paste0("echo 'RENV_LIB_DIR=", renv_dir, "' >> $GITHUB_ENV"))
          
          print("Environment variables set")
          print("===== RENV DIRECTORY SETUP DEBUG END =====")
        shell: Rscript {0}

      # ============ DEBUG CACHE ENVIRONMENT ============
      - name: Debug - Cache Environment
        run: |
          echo "===== CACHE ENVIRONMENT DEBUG START ====="
          echo "Checking cache-related environment variables..."
          
          echo "GLOBAL_LIB_DIR: ${GLOBAL_LIB_DIR}"
          echo "RENV_LIB_DIR: ${RENV_LIB_DIR}"
          echo "RUNNER_OS: ${RUNNER_OS}"
          echo "Detected Architecture: ${DETECTED_ARCH}"
          echo "Detected R Architecture: ${DETECTED_R_ARCH}"
          
          echo -e "\nChecking if cache directories exist:"
          if [ -d "${GLOBAL_LIB_DIR}" ]; then
            echo "GLOBAL_LIB_DIR exists"
            echo "Size: $(du -sh "${GLOBAL_LIB_DIR}" 2>/dev/null | cut -f1)"
            echo "Number of items: $(find "${GLOBAL_LIB_DIR}" -maxdepth 1 | wc -l)"
          else
            echo "GLOBAL_LIB_DIR does not exist"
          fi
          
          if [ -d "${RENV_LIB_DIR}" ]; then
            echo "RENV_LIB_DIR exists"
            echo "Size: $(du -sh "${RENV_LIB_DIR}" 2>/dev/null | cut -f1)"
            echo "Number of items: $(find "${RENV_LIB_DIR}" -maxdepth 1 | wc -l)"
          else
            echo "RENV_LIB_DIR does not exist"
          fi
          
          echo -e "\nCache keys that will be used:"
          echo "Local cache key: local-${RUNNER_OS}-${DETECTED_ARCH}-${{ inputs.working-dir }}-renv-${{ inputs.cache-version }}-${{ hashFiles('**/renv.lock') }}"
          echo "Global cache key: global-${RUNNER_OS}-${DETECTED_ARCH}-${{ inputs.working-dir }}-renv-${{ inputs.cache-version }}-${{ hashFiles('**/renv.lock') }}"
          
          echo -e "\nTesting GitHub Actions cache API access:"
          echo "ACTIONS_CACHE_URL: ${ACTIONS_CACHE_URL:-Not set}"
          echo "ACTIONS_RUNTIME_TOKEN: ${ACTIONS_RUNTIME_TOKEN:+Set (hidden)}"
          
          # Test network connectivity to GitHub
          echo -e "\nTesting network connectivity:"
          curl -Is https://api.github.com/rate_limit | head -n 1 || echo "Failed to reach GitHub API"
          
          echo "===== CACHE ENVIRONMENT DEBUG END ====="
        shell: bash

      # ============ CACHE LOCAL RENV (ARCHITECTURE-SPECIFIC) ============
      - name: Always upload local cache (architecture-specific)
        uses: pat-s/always-upload-cache@v3.0.11
        with:
          path: "${{ env.RENV_LIB_DIR }}"
          key: local-${{ runner.os }}-${{ steps.arch.outputs.arch }}-${{ inputs.working-dir }}-renv-${{ inputs.cache-version }}-${{ hashFiles('**/renv.lock') }}
          restore-keys: |
            local-${{ runner.os }}-${{ steps.arch.outputs.arch }}-${{ inputs.working-dir }}-renv-${{ inputs.cache-version }}-
            local-${{ runner.os }}-${{ steps.arch.outputs.arch }}-${{ inputs.working-dir }}-renv-

      # ============ POST-CACHE DEBUG ============
      - name: Debug - Post Local Cache Status
        if: always()
        run: |
          echo "===== POST LOCAL CACHE DEBUG START ====="
          echo "Checking cache action results..."
          
          if [ -d "${RENV_LIB_DIR}" ]; then
            echo "RENV_LIB_DIR still exists after cache action"
            echo "Contents:"
            find "${RENV_LIB_DIR}" -type d -maxdepth 2 | head -20
            echo "Total size: $(du -sh "${RENV_LIB_DIR}" 2>/dev/null | cut -f1)"
          else
            echo "RENV_LIB_DIR does not exist after cache action"
          fi
          
          # Check for any error messages in the environment
          echo -e "\nChecking for error indicators:"
          env | grep -i error || echo "No error env vars found"
          
          echo "===== POST LOCAL CACHE DEBUG END ====="
        shell: bash

      # ============ CACHE GLOBAL LIBRARIES (ARCHITECTURE-SPECIFIC) ============
      - name: Always upload global cache (architecture-specific)
        uses: pat-s/always-upload-cache@v3.0.11
        with:
          path: "${{ env.GLOBAL_LIB_DIR }}"
          key: global-${{ runner.os }}-${{ steps.arch.outputs.arch }}-${{ inputs.working-dir }}-renv-${{ inputs.cache-version }}-${{ hashFiles('**/renv.lock') }}
          restore-keys: |
            global-${{ runner.os }}-${{ steps.arch.outputs.arch }}-${{ inputs.working-dir }}-renv-${{ inputs.cache-version }}-
            global-${{ runner.os }}-${{ steps.arch.outputs.arch }}-${{ inputs.working-dir }}-renv-

      # ============ POST-CACHE DEBUG ============
      - name: Debug - Post Global Cache Status
        if: always()
        run: |
          echo "===== POST GLOBAL CACHE DEBUG START ====="
          echo "Checking cache action results..."
          
          if [ -d "${GLOBAL_LIB_DIR}" ]; then
            echo "GLOBAL_LIB_DIR still exists after cache action"
            echo "Contents:"
            find "${GLOBAL_LIB_DIR}" -type d -maxdepth 2 | head -20
            echo "Total size: $(du -sh "${GLOBAL_LIB_DIR}" 2>/dev/null | cut -f1)"
          else
            echo "GLOBAL_LIB_DIR does not exist after cache action"
          fi
          
          echo "===== POST GLOBAL CACHE DEBUG END ====="
        shell: bash

      # ============ INSTALL DEPENDENCIES ============
      - name: Install dependencies from lockfile (with debug)
        run: |
          print("===== DEPENDENCY INSTALLATION DEBUG START =====")
          
          # Enable verbose mode
          options(verbose = TRUE)
          
          # Function to safely print directory contents
          safe_list_files <- function(path, max_items = 10) {
            if (dir.exists(path)) {
              files <- list.files(path)
              print(paste("Directory", path, "contains", length(files), "items"))
              if (length(files) > 0) {
                print(paste("First", min(max_items, length(files)), "items:"))
                print(files[1:min(max_items, length(files))])
              }
            } else {
              print(paste("Directory", path, "does not exist"))
            }
          }
          
          working_dir <- "${{ inputs.working-dir }}"
          print(paste("Working directory:", working_dir))
          
          # Check current library paths
          print("Current library paths before restore:")
          print(.libPaths())
          
          # Restore to global lib
          print("========== GLOBAL RESTORE ==========")
          print(paste("Installing to global lib:", renv:::renv_libpaths_resolve(library = NULL)))
          
          tryCatch({
            renv::restore(project = working_dir, prompt = FALSE)
            print("Global restore completed successfully")
          }, error = function(e) {
            print(paste("ERROR during global restore:", e$message))
            print(traceback())
          })
          
          # Check what was installed
          safe_list_files(renv:::renv_libpaths_resolve(library = NULL)[1])
          
          # Activate renv, restore to local renv dir
          print("========== LOCAL RESTORE ==========")
          print("Activating renv...")
          
          tryCatch({
            renv::activate(project = working_dir)
            print("renv activated successfully")
          }, error = function(e) {
            print(paste("ERROR during activation:", e$message))
          })
          
          print(paste("Installing to local lib:", renv:::renv_libpaths_resolve(library = NULL)))
          
          tryCatch({
            renv::restore(project = working_dir, prompt = FALSE)
            print("Local restore completed successfully")
          }, error = function(e) {
            print(paste("ERROR during local restore:", e$message))
            print(traceback())
          })
          
          # Check what was installed
          safe_list_files(file.path(working_dir, "renv", "library"))
          
          # Isolate and deactivate renv
          print("========== ISOLATION ==========")
          tryCatch({
            renv::isolate(project = working_dir)
            print("renv isolated successfully")
          }, error = function(e) {
            print(paste("ERROR during isolation:", e$message))
          })
          
          tryCatch({
            renv::deactivate(project = working_dir)
            print("renv deactivated successfully")
          }, error = function(e) {
            print(paste("ERROR during deactivation:", e$message))
          })
          
          # List installed packages in local renv
          print("========== FINAL CHECK ==========")
          print("Contents of working directory:")
          safe_list_files(working_dir)
          
          print("Contents of renv directory:")
          safe_list_files(file.path(working_dir, "renv"))
          
          print("===== DEPENDENCY INSTALLATION DEBUG END =====")
        shell: Rscript {0}

      # ============ FINAL VERIFICATION ============
      - name: List installed packages in renv (with debug)
        run: |
          echo "===== FINAL RENV PACKAGES DEBUG START ====="
          echo "RENV_LIB_DIR: ${RENV_LIB_DIR}"
          
          if [ -d "${RENV_LIB_DIR}/library/" ]; then
            echo "Finding all packages in renv library:"
            find "${RENV_LIB_DIR}/library/" -maxdepth 3 -type d -ls
            
            echo -e "\nTotal package count:"
            find "${RENV_LIB_DIR}/library/" -maxdepth 3 -type d | wc -l
            
            echo -e "\nDisk usage:"
            du -sh "${RENV_LIB_DIR}/library/"
          else
            echo "ERROR: ${RENV_LIB_DIR}/library/ does not exist!"
            echo "Checking parent directory:"
            ls -la "${RENV_LIB_DIR}/" 2>/dev/null || echo "Parent directory also missing"
          fi
          echo "===== FINAL RENV PACKAGES DEBUG END ====="
        shell: bash
        
      - name: List installed packages in global library dir (with debug)
        run: |
          echo "===== FINAL GLOBAL PACKAGES DEBUG START ====="
          echo "GLOBAL_LIB_DIR: ${GLOBAL_LIB_DIR}"
          
          if [ -d "${GLOBAL_LIB_DIR}/" ]; then
            echo "Finding all packages in global library:"
            find "${GLOBAL_LIB_DIR}/" -maxdepth 3 -type d -ls | head -50
            echo "... (showing first 50 entries)"
            
            echo -e "\nTotal package count:"
            find "${GLOBAL_LIB_DIR}/" -maxdepth 3 -type d | wc -l
            
            echo -e "\nDisk usage:"
            du -sh "${GLOBAL_LIB_DIR}/"
          else
            echo "ERROR: ${GLOBAL_LIB_DIR}/ does not exist!"
          fi
          echo "===== FINAL GLOBAL PACKAGES DEBUG END ====="
        shell: bash

      # ============ SUMMARY DEBUG ============
      - name: Debug Summary
        if: always()
        run: |
          echo "===== DEBUG SUMMARY ====="
          echo "Action completed with following configuration:"
          echo "- Operating System: ${RUNNER_OS}"
          echo "- Architecture: ${DETECTED_ARCH}"
          echo "- R Architecture: ${DETECTED_R_ARCH}"
          echo "- Working Directory: ${{ inputs.working-dir }}"
          echo "- Renv Version: ${{ inputs.renv-version }}"
          echo "- Cache Version: ${{ inputs.cache-version }}"
          echo "- Global Lib Dir: ${GLOBAL_LIB_DIR}"
          echo "- Renv Lib Dir: ${RENV_LIB_DIR}"
          echo ""
          echo "Cache keys used:"
          echo "- Local: local-${RUNNER_OS}-${DETECTED_ARCH}-${{ inputs.working-dir }}-renv-${{ inputs.cache-version }}-${{ hashFiles('**/renv.lock') }}"
          echo "- Global: global-${RUNNER_OS}-${DETECTED_ARCH}-${{ inputs.working-dir }}-renv-${{ inputs.cache-version }}-${{ hashFiles('**/renv.lock') }}"
          echo ""
          echo "Check the logs above for any ERROR or WARNING messages"
          echo "===== END DEBUG SUMMARY ====="

        shell: bash
