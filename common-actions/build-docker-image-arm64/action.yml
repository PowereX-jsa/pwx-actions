name: 'build-docker-image-arm64'
description: 'Action for building docker image and pushing it to specified aws ecr repository'
author: 'rasto.liska@powerex.io'
inputs:
  docker-repo:
    required: true
    type: string
    description: "name of the docker repo in aws ecr where the image will be pushed"
  working-directory:
    required: true
    type: string
    description: "set this to working directory where the app with dockerfile is located"
  aws-access-key-id:
    required: true
    description: "set this to AWS_ACCESS_KEY_ID of your user"
  aws-secret-access-key:
    required: true
    description: "set this to AWS_SECRET_ACCESS_KEY of your user"
  aws-account-id:
    required: true
    description: "set this to AWS_ACCOUNT_ID of your user"
  platform:
    required: false
    type: string
    default: "linux/amd64"
    description: "Platform for Docker build (e.g., 'linux/arm64')"
  build-args:
    required: false
    type: string
    description: "Additional build arguments to pass to Docker"
outputs:
  tag-to-deploy:
    description: "Published image tag for immediate deployment"
    value: ${{ steps.output-docker-tag.outputs.TAG_TO_DEPLOY }}
runs:
  using: "composite"
  steps:
    - name: Set docker tag
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/master' || ${{ github.ref }} == 'refs/heads/main' ]]; then
          # set tags as env vars in current runner
          echo "IS_MASTER=true" >> "$GITHUB_ENV"
          echo "PROD_TAG=prod_$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          echo "TAG_DISPLAY=prod_$(git rev-parse --short HEAD), latest" >> "$GITHUB_ENV"
        else
          # set tags as env vars in current runner
          echo "IS_MASTER=false" >> "$GITHUB_ENV"
          TEST_TAG=$(echo test-deploy_${{ github.head_ref }} | tr -s '/' '_' | tr -s '#' '_' )
          echo "TEST_TAG=${TEST_TAG}" >> "$GITHUB_ENV"
          echo "TAG_DISPLAY=${TEST_TAG}" >> "$GITHUB_ENV"
        fi
      shell: bash
      
    # Set up Docker Buildx for multi-platform support
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: eu-central-1
        
    # Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    # Build and push with platform support - For master/main branch
    - name: Build and push (master/main)
      if: env.IS_MASTER == 'true'
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.working-directory }}
        file: ${{ inputs.working-directory }}/Dockerfile
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.docker-repo }}:${{ env.PROD_TAG }}
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.docker-repo }}:latest
        platforms: ${{ inputs.platform }}
        build-args: |
          ${{ inputs.build-args || '' }}
          
    # Build and push with platform support - For feature branches
    - name: Build and push (feature branch)
      if: env.IS_MASTER == 'false'
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.working-directory }}
        file: ${{ inputs.working-directory }}/Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.docker-repo }}:${{ env.TEST_TAG }}
        platforms: ${{ inputs.platform }}
        build-args: |
          ${{ inputs.build-args || '' }}
          
    # Set output tag
    - name: Show published docker image tag and set it as output of job
      id: output-docker-tag
      run: |
        echo "following tags for docker image: ${{ env.TAG_DISPLAY }} were pushed"
        
        # set output tag from job, going for real tag 'test_deploy_*', or 'prod_*' not 'latest'
        if [[ "${{ env.IS_MASTER }}" == "true" ]]; then
          echo "TAG_TO_DEPLOY=${{ env.PROD_TAG }}" >> "$GITHUB_OUTPUT"
        else
          echo "TAG_TO_DEPLOY=${{ env.TEST_TAG }}" >> "$GITHUB_OUTPUT"
        fi
      shell: bash
      
    - name: Create summary
      run: |
        # create job summary
        echo "### ## pushed tags: '${{ env.TAG_DISPLAY }}' to aws ecr registry" >> $GITHUB_STEP_SUMMARY
        echo "### ## " >> $GITHUB_STEP_SUMMARY
        echo "### ## going to use following tag: '${{ steps.output-docker-tag.outputs.TAG_TO_DEPLOY }}' for deployment" >> $GITHUB_STEP_SUMMARY
        echo "### ## platform: '${{ inputs.platform }}'" >> $GITHUB_STEP_SUMMARY
      shell: bash
